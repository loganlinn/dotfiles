#!/usr/bin/env bash

# https://github.com/tilalis/git-all

# Colors for output
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
GRAY='\033[0;37m'
EC='\033[0m' # end color

usage() {
	cat <<HERE
usage: git all <any git command (i.e. status, pull etc.)> <parameters to that command>  # execute git command in all repositories in current directory  
   or: git all [filename] <any git command>                                             # execute git command for all repositories listed in file with {filename} or .{filename}
   or: git all clone <filename>                                                         # clone all repositories listed in file to current directory
HERE
}

clone() {
	repositories_file_filename="$1"

	if [[ -z "$repositories_file_filename" ]]; then
		echo "clone requires filename with list of repositories!"
		exit 1
	fi

	if [[ ! -f $repositories_file_filename ]]; then
		echo "file ${repositories_file_filename} does not exist!"
		exit 1
	fi

	while read -r clone_params; do
		echo -e "${BLUE}$ ${GRAY}git clone${EC} "$clone_params""
		#shellcheck disable=SC2086
		git clone $clone_params
		echo
	done <"$repositories_file_filename"
}

exclude() {
	directory="$1"

	# ecluded_directories is a global variable
	for excluded_directory in "${excluded_directories[@]}"; do
		if [[ "$directory" = "${excluded_directory}/" ]] || [[ "$directory" = "$excluded_directory}" ]]; then
			return 0
		fi
	done

	return 1
}

main() {
	test -f "$1"
	scope_regular_file_exists=$?

	test -f ".$1"
	scope_dotfile_exists=$?

	if (($scope_regular_file_exists == 0)) || (($scope_dotfile_exists == 0)); then
		if (($scope_dotfile_exists == 0)); then
			scope_file=".$1"
		else
			scope_file="$1"
		fi

		shift

		directories=()
		while read -r directory; do
			directories+=("${directory%/}/")
		done <"$scope_file"

		use_ignore_file=false
	else
		directories=(*/)
		use_ignore_file=true
	fi

	# Read .gitallignore file
	excluded_directories=()

	if [[ $use_ignore_file && -f .gitallignore ]]; then
		while read -r line; do
			excluded_directories+=("$line")
		done <.gitallignore
	fi

	errors=()
	for directory in "${directories[@]}"; do
		# Exlude directories from .gitallignore
		if $use_ignore_file && exclude "$directory"; then
			continue
		fi

		# Exclude non-git repositories folders
		if ! git -C "$directory" rev-parse >/dev/null 2>&1; then
			continue
		fi

		cd "$directory" || (echo "Could not change directory!" && exit 1)

		echo -e "${BLUE}$ ${GRAY}cd${EC} ${directory%/}"
		echo -e "${BLUE}$ ${GRAY}git${EC} $*"

		if ! git "$@"; then
			errors+=("${directory%/}")
		fi

		cd ..
		echo
	done

	if [[ 0 -eq "${#errors[@]}" ]]; then
		echo -e "${YELLOW}WARNING! ${GRAY}Non-zero code returned while executing${EC} 'git $*' ${GRAY}in the following repositories:"

		for repository in "${errors[@]}"; do
			echo -e "${GRAY}*${EC} $repository"
		done

		exit 1
	fi

	exit 0
}

case $1 in
-h | "")
	usage
	exit 0
	;;
clone)
	clone "$2"
	exit 0
	;;
*)
	main "$@"
	;;
esac
