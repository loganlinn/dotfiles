#!/usr/bin/env bash

# declare -gx SRC_GIT_HOME
# declare -gx SRC_GIT_DEFAULT_OPTS
# declare -gx SRC_GIT_CLONE_OPTS=${SRC_GIT_CLONE_OPTS:-'--depth=1 --progress'}

src-home() {
  export SRC_HOME
  printf '%s' "${SRC_HOME:=$HOME/src}"
}

# Normalizes argument into git valid repository (URL)
src-repo() {
  while (($#)); do
    case $1 in
    -h | --help)
      echo "usage: src-repo arg"
      return
      ;;
    -*)
      echo >&2 "src-repo: invalid option '$1'"
      return 1
      ;;
    *)
      break
      ;;
    esac
  done

  case $1 in
  *://*) # i.e. https://github.com/loganlinn/dotfiles
    printf "%s\n" "$1"
    ;;
  *@*:*) # i.e. git@github.com:loganlinn/dotfiles
    printf "%s\n" "$1"
    ;;
  *.*/*) # i.e. github.com/loganlinn/dotfiles
    echo "https://$1"
    ;;
  */*) # i.e. loganlinn/dotfiles
    echo "https://github.com/$1"
    ;;
  *)
    (
      set -eo pipefail
      gh repo list "$@" |
        fzf -m --layout=reverse --bind ctrl-a:select-all,ctrl-d:deselect-all,ctrl-t:toggle-all |
        cut -f1 |
        sed -e 's|^|https://github.com/|' -e 's|$|.git|'
    )
    ;;
  esac
}

src-dir() {
  while (($#)); do
    case $1 in
    -h | --help)
      echo "usage: src-dir [-h|--help] [--] arg..."
      return
      ;;
    --)
      shift
      break
      ;;
    -*)
      echo >&2 "src-dir: invalid option '$1'"
      return 1
      ;;
    *)
      break
      ;;
    esac
  done

  for arg; do
    local path
    case "$arg" in
    *@*:*)
      path="${arg#*@}"
      path=${path/:/\/}
      ;;
    *)
      path="${arg#*://}"
      ;;
    esac
    path="${path%%.git}"
    printf "%s" "$(src-home)/$path"
  done
}

#
# Usage: src-get <repository>
#        src-get <owner>/<repo>
#
src-get() {
  local debug_flag=${DEBUG+true}
  local depth=
  case $1 in
  --depth)
    depth=${2?'Missing operand'}
    shift 2
    ;;
  --shallow)
    depth=1
    shift
    ;;
  --no-shallow)
    depth=
    shift
    ;;
  -h | --help | help)
    echo "Usage: src-get [options] <repository>"
    echo "       src-get [options] <owner>/<repo>"
    echo ""
    echo "Options:"
    echo "  --depth <depth>"
    echo "      Create a shallow clone with a history truncated to the specified number of commits."
    echo "  --[no-]shallow"
    echo "      Create a shallow clone with a history truncated to single commit."
    return 0
    ;;
  --debug)
    debug_flag=$1
    shift
    ;;
  --)
    shift
    ;;
  -*)
    echo "src-get: unknown '$1' option" >&2
    echo "Try 'src-get --help' for more information." >&2
    return 1
    ;;
  esac

  if [[ -n $debug_flag ]]; then
    set -x
  fi

  if [[ -z $1 ]]; then
    echo "src-get: missing operand" >&2
    echo "Try 'src-get --help' for more information." >&2
    return 1
  fi

  for arg; do
    for repo in $(src-repo "$arg"); do
      local dir
      dir=$(src-dir "$repo")

      if [[ ! -d $dir ]]; then
        local git_clone_cmd=("${SRC_GIT:-git}" clone ${depth:+--depth=$depth} --progress -- "$repo" "$dir")
        if command "${git_clone_cmd[@]}"; then
          echo >&2 "src-get: ✅ ${git_clone_cmd[*]}"
        else
          return $?
        fi
      fi

      cd -- "$dir"
      echo >&2 "src-get: ✅ cd -- '$dir'"

      if zoxide add "$dir" >/dev/null 2>&1; then
        echo >&2 "src-get: ✅ zoxide add '$dir'"
      fi
    done
  done
}

src-for-each-exec() {
  local shell

  # run each command in subshell, first determine shell.
  # since $SHELL is not always reliable, we determine from PID.
  shell=$(ps -p $$ -o args= | sed -e 's/^.*-//' -e 's/ .*$//')
  # womp, womp
  if ! hash "$shell" >/dev/null 2>&1; then
    shell=${SHELL:-bash}
  fi

  find "$(src-home)" -type d -name '.git' -prune \
    -execdir "$shell" -c "$*" _ {} \;
}

# Allow this to be executed directly
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
  src-get "$@"
fi
