#!/usr/bin/env bash

SRC_HOME=${SRC_HOME:-$HOME/src}
export SRC_HOME

_src_msg() {
	printf "%s\n" "$@"
} >&2

# Normalize input into URL
src-repo-url() {
	case $1 in
	*://*) # i.e. https://github.com/loganlinn/dotfiles
		printf "%s\n" "$1"
		;;
	*.*/*) # i.e. github.com/loganlinn/dotfiles
		echo "https://$1"
		;;
	*/*) # i.e. loganlinn/dotfiles
		echo "https://github.com/$1"
		;;
	*)
    gh repo list "$@" | fzf | awk '{print $1}' || return 1
		# if command -v fzf >/dev/null >&2; then
		#   gh repo list "$@" | fzf | awk '{print $1}' || return 1
    # else
    #   _src_msg "error: failed to convert '$*' to repository URL"
    #   return 1
    # fi
		;;
	esac
}

src-repo-path() {
	local url path

	if [[ $1 == *"://"* ]]; then
		url=$1
	else
		url=$(src-repo-url "$1") || return 1
	fi

	path=${SRC_HOME?}/${url#*://}
	path=${path%%.git}

	printf '%s' "$path"
}

#
# Usage: src-clone <repo>...
#
src-clone() (
	set -e
	for arg; do
		src_repo=$(src-repo-url "$arg")
		src_path=$(src-repo-path "$arg")

		if [[ ! -d $src_path ]]; then
			git clone "$src_repo" "$src_path" >&2
    else
      git -C "$src_path" fetch --all >&2
    fi

		##########################################
		# Integrate with "smart cd" tools
		#
		if command -v zoxide >/dev/null 2>&1; then
			zoxide add "$src_path" || true
		fi
		if command -v fasd >/dev/null 2>&1; then
			fasd -A "$src_path" || true
		fi
		##########################################

    printf '%s\n' "$src_path"
	done
)

#
# Usage: src-get <repository>
#        src-get <owner>/<repo>
#
src-get() {
  case $1 in
    -h|--help|help)
	    _src_msg "Usage: src-get <repository>"
	    _src_msg "       src-get <owner>/<repo>"
      return 0
      ;;
    -*)
      _src_msg "src-get: unknown '$1' option"
      _src_msg "Try 'src-get --help' for more information."
      return 1
      ;;
  esac
  if [[ -z $1 ]]; then
    _src_msg "src-get: missing operand"
    _src_msg "Try 'src-get --help' for more information."
    return 1
  elif [[ $# -gt 1 ]]; then
    _src_msg "src-get: too many operands"
    _src_msg "Try 'src-get --help' for more information."
    return 1
  fi

	cd -- "$(src-clone "$1")"
}

# shellcheck disable=SC2120
src-fd() {
	command fd --base-directory "${SRC_HOME?}" "$@"
}

src-for-each-repo() {
  local repo

  for repo in "${SRC_HOME?}"/*; do
    if [[ -d "$repo" ]]; then
      cd -- "$repo"
      "$@"
    fi
  done
}

# src-list-dump () {
#   local format
#   case "${1-edn}" in
#     edn)
#       format="{:path \"%s\"\n :git/config \"%s\"}"
#       ;;
#     *)
#       _src_msg "error: unknown format '$1'. Valid formats are 'edn'"
#       return 1
#       ;;
#   esac
#   local srcdir
#   for srcdir in $(src-list); do
#     jq --null-input \
#       --arg srcdir "$(realpath --relative-to="$SRC_HOME" "$srcdir")" \
#       --arg git_config "$(git -C "$srcdir" config --local --list)" \
#       '{path: $srcdir, config: $git_config}'
#   done
# }
