#!/usr/bin/env bash

src-home() {
	export SRC_HOME
	printf '%s\n' "${SRC_HOME:=$HOME/src}"
}

# Normalize input into URL
src-repo-url() {
	case $1 in
	*://*) # i.e. https://github.com/loganlinn/dotfiles
		printf "%s\n" "$1"
		;;
	*.*/*) # i.e. github.com/loganlinn/dotfiles
		echo "https://$1"
		;;
	*/*) # i.e. loganlinn/dotfiles
		echo "https://github.com/$1"
		;;
	*)
		(
			set -eo pipefail
			gh repo list "$@" |
				fzf -m --layout=reverse --bind ctrl-a:select-all,ctrl-d:deselect-all,ctrl-t:toggle-all |
				cut -f1 |
				sed -e 's|^|https://github.com/|' -e 's|$|.git|'
		)
		;;
	esac
}

src-repo-path() {
	for url; do
		local path

		path="${url#*://}"   # strip prefix
		path="${path%%.git}" # strip suffix

		printf "%s/%s\n" "$(src-home)" "$path"
	done
}

#
# Usage: src-get <repository>
#        src-get <owner>/<repo>
#
src-get() (
	case $1 in
	-h | --help | help)
		echo "Usage: src-get <repository>"
		echo "       src-get <owner>/<repo>"
		return 0
		;;
	--debug)
		shift
		SRC_GET_DEBUG=1
		;;
	--)
		shift
		;;
	-*)
		echo "src-get: unknown '$1' option" >&2
		echo "Try 'src-get --help' for more information." >&2
		return 1
		;;
	esac

	if [[ -z $1 ]]; then
		echo "src-get: missing operand" >&2
		echo "Try 'src-get --help' for more information." >&2
		return 1
	fi

	local src_repo
	local src_path

	[[ -z ${SRC_GET_DEBUG:-} ]] || set -x

	for repo; do
		for src_repo in $(src-repo-url "$repo"); do
			src_path=$(src-repo-path "$src_repo")

			if [[ ! -d $src_path ]]; then
				git clone --depth=1 --progress -- "$src_repo" "$src_path" &&
					cd "$src_path" ||
					return $?
			else
				cd -- "$src_path" && git fetch --all
			fi
		done
	done
)

src-for-each-exec() {
	local shell

	# run each command in subshell, first determine shell.
	# since $SHELL is not always reliable, we determine from PID.
	shell=$(ps -p $$ -o args= | sed -e 's/^.*-//' -e 's/ .*$//')
	# womp, womp
	if ! hash "$shell" >/dev/null 2>&1; then
		shell=${SHELL:-bash}
	fi

	find "$(src-home)" -type d -name '.git' -prune \
		-execdir "$shell" -c "$*" _ {} \;
}
