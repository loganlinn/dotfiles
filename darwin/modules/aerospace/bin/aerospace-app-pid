#!/usr/bin/env bash

set -euo pipefail

usage() {
  script_name=$(basename "$0")
  echo "usage: $script_name [-h|--help] [-0] [-n|--name <app-name>] [-b|--bundle-id <app-bundle-id>]"
}

error() {
  echo >&2 "$*"
  usage >&2
  exit 1
}

[[ -z ${TRACE:-} ]] || set -x

jq_expr=''
jq_argv=()
jq_output_flag='--raw-output'

while (($#)); do
  case ${1-} in
  -b | --bundle-id)
    [[ -n ${2:-} ]] || error "missing operand: $1"
    jq_expr="${jq_expr:+"$jq_expr or "}.[\"app-bundle-id\"] == \$ARGS.positional[${#jq_argv[@]}]"
    jq_argv+=("$2")
    shift 2
    ;;
  -n | --name)
    [[ -n ${2:-} ]] || error "missing operand: $1"
    jq_expr="${jq_expr:+"$jq_expr or "}.[\"app-name\"] | test(\$ARGS.positional[${#jq_argv[@]}]; \"i\")"
    jq_argv+=("$2")
    shift 2
    ;;
  -0)
    jq_output_flag='--raw-output0'
    shift
    ;;
  -h | --help)
    usage
    exit 0
    ;;
  -*) error "invalid option -- $1" ;;
  *) error "extra operand  ‘$1’" ;;
  esac
done

aerospace list-apps --json |
  jq \
    --exit-status \
    ${jq_output_flag} \
    ".[] |${jq_expr:+" select($jq_expr) |"} .[\"app-pid\"]" \
    --args "${jq_argv[@]}"
