#!/usr/bin/env bash
set -euo pipefail

export AWS_PAGER=""

usage() {
  cat <<EOF
Usage: aws-secretctl-get [OPTIONS] [SECRET...]

Get the value of one or more secrets from Secrets Manager or SSM Parameter Store.

Arguments:
  SECRET...     One or more secrets (name or ARN). If not provided, interactive selector is shown.

Options:
  --ssm         Get from SSM parameters (default: auto-detect from ARN or use Secrets Manager)
  -h, --help    Show this help message

Backend is auto-detected from ARN format:
  - arn:aws:secretsmanager:* → Secrets Manager
  - arn:aws:ssm:* → SSM Parameter Store
  - Otherwise uses --ssm flag or defaults to Secrets Manager

If multiple secrets are provided, each value will be retrieved.

Examples:
  aws-secretctl-get my-secret
  aws-secretctl-get --ssm /prod/db/password
  aws-secretctl-get arn:aws:ssm:us-east-1:123:parameter/my-param
EOF
}

backend_flag=""
secret_ids=()

# Parse arguments
while [[ $# -gt 0 ]]; do
  case $1 in
  -h | --help)
    usage
    exit 0
    ;;
  --ssm)
    backend_flag="ssm"
    shift
    ;;
  -*)
    echo >&2 "Unknown option: $1"
    usage >&2
    exit 1
    ;;
  *)
    secret_ids+=("$1")
    shift
    ;;
  esac
done

# Detect backend from identifier or flag (default: secretsmanager)
detect_backend() {
  local identifier="$1"
  local flag="$2"

  # Explicit flag wins
  [[ "$flag" == "ssm" ]] && echo "ssm" && return

  # ARN detection
  [[ "$identifier" == arn:aws:ssm:* ]] && echo "ssm" && return
  [[ "$identifier" == arn:aws:secretsmanager:* ]] && echo "secretsmanager" && return

  # Default to secretsmanager
  echo "secretsmanager"
}

# Get value from appropriate backend
get_value() {
  local identifier="$1"
  local backend="$2"

  if [[ "$backend" == "ssm" ]]; then
    aws ssm get-parameter --name "$identifier" --with-decryption --query 'Parameter.Value' --output text
  else
    aws secretsmanager get-secret-value --secret-id "$identifier" --query SecretString --output text
  fi
}

# Select secret if none provided
if [[ ${#secret_ids[@]} -eq 0 ]]; then
  select_args=(--limit 1)
  [[ "$backend_flag" == "ssm" ]] && select_args+=(--ssm)
  secret_ids=("$(aws-secretctl-select "${select_args[@]}")") || exit $?
  if [[ -z "${secret_ids[0]}" ]]; then
    echo >&2 "No secret selected"
    exit 1
  fi
fi

# Process each secret, falling back to interactive select on error
for secret_id in "${secret_ids[@]}"; do
  backend=$(detect_backend "$secret_id" "$backend_flag")

  if ! get_value "$secret_id" "$backend" 2>/dev/null; then
    echo >&2 "Secret '$secret_id' not found, searching..."
    select_args=(--limit 1 --query "$secret_id")
    [[ "$backend" == "ssm" ]] && select_args+=(--ssm)
    resolved_id="$(aws-secretctl-select "${select_args[@]}")" || exit $?
    if [[ -z "$resolved_id" ]]; then
      echo >&2 "No secret selected"
      exit 1
    fi
    get_value "$resolved_id" "$backend"
  fi
done
