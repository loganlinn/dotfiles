#!/usr/bin/env bash
set -euo pipefail

export AWS_PAGER=""

usage() {
  cat <<EOF
Usage: aws-secretctl-list [OPTIONS]

List all secrets from Secrets Manager or SSM Parameter Store.

Options:
  --arn         Show ARNs instead of names
  --ssm         List SSM parameters instead of secrets
  --path PATH   Filter SSM parameters by path prefix (requires --ssm)
  -h, --help    Show this help message

Examples:
  aws-secretctl-list
  aws-secretctl-list --arn
  aws-secretctl-list --ssm
  aws-secretctl-list --ssm --path /prod/db/
  aws-secretctl-list | grep prod
EOF
}

backend="secretsmanager"
field="Name"
path_filter=""

# Parse arguments
while [[ $# -gt 0 ]]; do
  case $1 in
  -h | --help)
    usage
    exit 0
    ;;
  --ssm)
    backend="ssm"
    shift
    ;;
  --arn)
    field="ARN"
    shift
    ;;
  --path)
    if [[ $# -lt 2 ]]; then
      echo >&2 "Error: --path requires a value"
      exit 1
    fi
    path_filter="$2"
    shift 2
    ;;
  -*)
    echo >&2 "Unknown option: $1"
    usage >&2
    exit 1
    ;;
  *)
    echo >&2 "Error: unexpected argument: $1"
    usage >&2
    exit 1
    ;;
  esac
done

# Validate --path only with --ssm
if [[ -n "$path_filter" && "$backend" != "ssm" ]]; then
  echo >&2 "Error: --path can only be used with --ssm"
  exit 1
fi

# List based on backend
if [[ "$backend" == "ssm" ]]; then
  # Build SSM parameter filters
  ssm_args=()
  if [[ -n "$path_filter" ]]; then
    ssm_args+=(--parameter-filters "Key=Path,Option=Recursive,Values=$path_filter")
  fi

  # SSM uses different query path
  if [[ "$field" == "ARN" ]]; then
    aws ssm describe-parameters "${ssm_args[@]}" --query 'Parameters[].[ARN]' --output text
  else
    aws ssm describe-parameters "${ssm_args[@]}" --query 'Parameters[].[Name]' --output text
  fi
else
  # Secrets Manager
  aws secretsmanager list-secrets --query "SecretList[].[$field]" --output text
fi
