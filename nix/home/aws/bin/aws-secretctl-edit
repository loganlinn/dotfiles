#!/usr/bin/env bash
set -euo pipefail

export AWS_PAGER=""

usage() {
  cat <<EOF
Usage: aws-secretctl-edit [OPTIONS] [SECRET]

Edit a secret using vipe.

Arguments:
  SECRET       Secret (name or ARN). If not provided, interactive selector is shown.

Options:
  --ssm        Edit SSM parameter (default: auto-detect from ARN or use Secrets Manager)
  -h, --help   Show this help message

Backend is auto-detected from ARN format:
  - arn:aws:secretsmanager:* → Secrets Manager
  - arn:aws:ssm:* → SSM Parameter Store
  - Otherwise uses --ssm flag or defaults to Secrets Manager

The secret value will be opened in vi (without plugins) for editing.
After editing, you can choose to update, delete, or cancel the operation.

For SSM parameters, the Type (String/SecureString/StringList) is preserved.
EOF
}

backend_flag=""
secret_id=""

# Parse arguments
while [[ $# -gt 0 ]]; do
  case $1 in
  -h | --help)
    usage
    exit 0
    ;;
  --ssm)
    backend_flag="ssm"
    shift
    ;;
  -*)
    echo >&2 "Unknown option: $1"
    usage >&2
    exit 1
    ;;
  *)
    if [[ -n "$secret_id" ]]; then
      echo >&2 "Error: multiple secret IDs provided"
      usage >&2
      exit 1
    fi
    secret_id="$1"
    shift
    ;;
  esac
done

# Detect backend from identifier or flag (default: secretsmanager)
detect_backend() {
  local identifier="$1"
  local flag="$2"

  # Explicit flag wins
  [[ "$flag" == "ssm" ]] && echo "ssm" && return

  # ARN detection
  [[ "$identifier" == arn:aws:ssm:* ]] && echo "ssm" && return
  [[ "$identifier" == arn:aws:secretsmanager:* ]] && echo "secretsmanager" && return

  # Default to secretsmanager
  echo "secretsmanager"
}

# Select secret if not provided
if [[ -z "$secret_id" ]]; then
  select_args=(--limit 1)
  [[ "$backend_flag" == "ssm" ]] && select_args+=(--ssm)
  secret_id="$(aws-secretctl-select "${select_args[@]}")" || exit $?
  if [[ -z "$secret_id" ]]; then
    echo >&2 "No secret selected"
    exit 1
  fi
fi

# Detect backend
backend=$(detect_backend "$secret_id" "$backend_flag")

# Get current value and metadata based on backend
current_value=""
param_type=""

if [[ "$backend" == "ssm" ]]; then
  # Get SSM parameter with metadata
  if ! param_json="$(aws ssm get-parameter --name "$secret_id" --with-decryption --output json 2>/dev/null)"; then
    echo >&2 "Parameter '$secret_id' not found, searching..."
    secret_id="$(aws-secretctl-select --limit 1 --ssm --query "$secret_id")" || exit $?
    if [[ -z "$secret_id" ]]; then
      echo >&2 "No parameter selected"
      exit 1
    fi
    param_json="$(aws ssm get-parameter --name "$secret_id" --with-decryption --output json)"
  fi
  current_value="$(echo "$param_json" | jq -r '.Parameter.Value')"
  param_type="$(echo "$param_json" | jq -r '.Parameter.Type')"
else
  # Get Secrets Manager secret
  if ! current_value="$(aws secretsmanager get-secret-value --secret-id "$secret_id" --query SecretString --output text 2>/dev/null)"; then
    echo >&2 "Secret '$secret_id' not found, searching..."
    secret_id="$(aws-secretctl-select --limit 1 --query "$secret_id")" || exit $?
    if [[ -z "$secret_id" ]]; then
      echo >&2 "No secret selected"
      exit 1
    fi
    current_value="$(aws secretsmanager get-secret-value --secret-id "$secret_id" --query SecretString --output text)"
  fi
fi

# Edit with vipe using vi without plugins
new_value="$(echo "$current_value" | EDITOR="vi -u NONE -n" vipe)"

# Check if value changed
if [[ "$current_value" == "$new_value" ]]; then
  echo >&2 "No changes made"
  exit 0
fi

# Determine action based on whether input is empty
if [[ -z "$new_value" ]]; then
  action="$(echo -e "Delete\nCancel" | gum choose --header "Empty input. Delete secret '$secret_id'?")" || exit $?
else
  action="$(echo -e "Update\nDelete\nCancel" | gum choose --header "Action for secret '$secret_id'?")" || exit $?
fi

case "$action" in
Update)
  if [[ "$backend" == "ssm" ]]; then
    # SSM put-parameter with Type preservation
    if ! aws ssm put-parameter \
      --name "$secret_id" \
      --value "$new_value" \
      --type "$param_type" \
      --overwrite 2>/dev/null; then
      echo >&2 "Failed to update parameter"
      exit 1
    fi
    echo >&2 "Parameter updated successfully (Type: $param_type)"
  else
    # Secrets Manager put-secret-value
    if ! aws secretsmanager put-secret-value \
      --secret-id "$secret_id" \
      --secret-string "$new_value" 2>/dev/null; then
      echo >&2 "Failed to update secret"
      exit 1
    fi
    echo >&2 "Secret updated successfully"
  fi
  ;;
Delete)
  delete_args=("$secret_id")
  [[ "$backend" == "ssm" ]] && delete_args+=(--ssm)
  aws-secretctl-delete "${delete_args[@]}" || exit $?
  ;;
Cancel | "")
  echo >&2 "Operation cancelled"
  exit 1
  ;;
esac
