#!/usr/bin/env bash
set -euo pipefail

export AWS_PAGER=""

usage() {
  cat <<EOF
Usage: aws-secretctl-delete [OPTIONS] [SECRET]

Delete a secret from Secrets Manager or SSM Parameter Store.

Arguments:
  SECRET                          Secret (name or ARN). If not provided, interactive selector is shown.

Options:
  --ssm                           Delete SSM parameter (default: auto-detect from ARN or use Secrets Manager)
  --force                         Force delete without recovery (Secrets Manager only)
  --recovery-window-in-days DAYS  Schedule deletion with recovery window (7-30 days, Secrets Manager only)
  -h, --help                      Show this help message

Backend is auto-detected from ARN format:
  - arn:aws:secretsmanager:* → Secrets Manager
  - arn:aws:ssm:* → SSM Parameter Store
  - Otherwise uses --ssm flag or defaults to Secrets Manager

Note: SSM parameter deletion is immediate with no recovery period.
      Secrets Manager supports recovery windows.

If neither --force nor --recovery-window-in-days is provided, an interactive prompt is shown.
EOF
}

backend_flag=""
force=""
recovery_window=""
secret_id=""

# Parse arguments
while [[ $# -gt 0 ]]; do
  case $1 in
  -h | --help)
    usage
    exit 0
    ;;
  --ssm)
    backend_flag="ssm"
    shift
    ;;
  --force)
    force="true"
    shift
    ;;
  --recovery-window-in-days)
    if [[ $# -lt 2 ]]; then
      echo >&2 "Error: --recovery-window-in-days requires a value"
      exit 1
    fi
    recovery_window="$2"
    shift 2
    ;;
  -*)
    echo >&2 "Unknown option: $1"
    usage >&2
    exit 1
    ;;
  *)
    secret_id="$1"
    shift
    ;;
  esac
done

# Detect backend from identifier or flag (default: secretsmanager)
detect_backend() {
  local identifier="$1"
  local flag="$2"

  # Explicit flag wins
  [[ "$flag" == "ssm" ]] && echo "ssm" && return

  # ARN detection
  [[ "$identifier" == arn:aws:ssm:* ]] && echo "ssm" && return
  [[ "$identifier" == arn:aws:secretsmanager:* ]] && echo "secretsmanager" && return

  # Default to secretsmanager
  echo "secretsmanager"
}

# Select secret if not provided
if [[ -z "$secret_id" ]]; then
  select_args=(--limit 1)
  [[ "$backend_flag" == "ssm" ]] && select_args+=(--ssm)
  secret_id="$(aws-secretctl-select "${select_args[@]}")" || exit $?
  if [[ -z "$secret_id" ]]; then
    echo >&2 "No secret selected"
    exit 1
  fi
fi

# Detect backend
backend=$(detect_backend "$secret_id" "$backend_flag")

# Validate options based on backend
if [[ "$backend" == "ssm" ]]; then
  if [[ -n "$recovery_window" ]]; then
    echo >&2 "Error: --recovery-window-in-days is not supported for SSM parameters"
    echo >&2 "SSM parameter deletion is immediate."
    exit 1
  fi
fi

# Interactive mode if neither force nor recovery window specified
if [[ -z "$force" && -z "$recovery_window" ]]; then
  if [[ "$backend" == "ssm" ]]; then
    # SSM: only option is immediate deletion with confirmation
    if ! gum confirm "SSM parameter deletion is immediate with no recovery period. Delete '$secret_id'?"; then
      echo >&2 "Deletion cancelled"
      exit 1
    fi
    force="true"
  else
    # Secrets Manager: offer force or scheduled deletion
    action="$(echo -e "Force delete (immediate)\nSchedule deletion (7-30 days)\nCancel" | gum choose --header "How to delete secret '$secret_id'?")" || exit $?
    case "$action" in
    "Force delete (immediate)")
      force="true"
      ;;
    "Schedule deletion (7-30 days)")
      recovery_window="$(gum input --placeholder "Enter recovery window in days (7-30)" --value "30")"
      if [[ ! "$recovery_window" =~ ^[0-9]+$ ]] || [[ "$recovery_window" -lt 7 ]] || [[ "$recovery_window" -gt 30 ]]; then
        echo >&2 "Invalid recovery window: must be between 7 and 30 days"
        exit 1
      fi
      ;;
    Cancel | "")
      echo >&2 "Deletion cancelled"
      exit 1
      ;;
    esac
  fi
fi

# Validate recovery window if provided
if [[ -n "$recovery_window" ]]; then
  if [[ ! "$recovery_window" =~ ^[0-9]+$ ]] || [[ "$recovery_window" -lt 7 ]] || [[ "$recovery_window" -gt 30 ]]; then
    echo >&2 "Invalid recovery window: must be between 7 and 30 days"
    exit 1
  fi
fi

# Execute deletion with error handling
delete_item() {
  local identifier="$1"
  local be="$2"

  if [[ "$be" == "ssm" ]]; then
    # SSM deletion is always immediate
    if aws ssm delete-parameter --name "$identifier" 2>/dev/null; then
      echo >&2 "SSM parameter deleted (immediate, no recovery possible)"
      return 0
    fi
  else
    # Secrets Manager deletion
    if [[ -n "$force" ]]; then
      if aws secretsmanager delete-secret \
        --secret-id "$identifier" \
        --force-delete-without-recovery 2>/dev/null; then
        echo >&2 "Secret deleted immediately (no recovery possible)"
        return 0
      fi
    elif [[ -n "$recovery_window" ]]; then
      if aws secretsmanager delete-secret \
        --secret-id "$identifier" \
        --recovery-window-in-days "$recovery_window" 2>/dev/null; then
        echo >&2 "Secret scheduled for deletion in $recovery_window days"
        return 0
      fi
    else
      echo >&2 "Error: neither force nor recovery window specified"
      exit 1
    fi
  fi
  return 1
}

# Try to delete, fallback to select on error
if ! delete_item "$secret_id" "$backend"; then
  echo >&2 "Secret '$secret_id' not found, searching..."
  select_args=(--limit 1 --query "$secret_id")
  [[ "$backend" == "ssm" ]] && select_args+=(--ssm)
  secret_id="$(aws-secretctl-select "${select_args[@]}")" || exit $?
  if [[ -z "$secret_id" ]]; then
    echo >&2 "No secret selected"
    exit 1
  fi
  # Retry with resolved secret
  delete_item "$secret_id" "$backend" || exit 1
fi
