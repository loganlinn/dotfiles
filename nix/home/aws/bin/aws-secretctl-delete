#!/usr/bin/env bash
set -euo pipefail

export AWS_PAGER=""

usage() {
  cat <<EOF
Usage: aws-secretctl-delete [OPTIONS] [SECRET]

Delete a secret.

Arguments:
  SECRET                          Secret (name or ARN). If not provided, interactive selector is shown.

Options:
  --force                         Force delete without recovery
  --recovery-window-in-days DAYS  Schedule deletion with recovery window (7-30 days)
  -h, --help                      Show this help message

If neither --force nor --recovery-window-in-days is provided, an interactive prompt is shown.
EOF
}

force=""
recovery_window=""
secret_id=""

# Parse arguments
while [[ $# -gt 0 ]]; do
  case $1 in
  -h | --help)
    usage
    exit 0
    ;;
  --force)
    force="true"
    shift
    ;;
  --recovery-window-in-days)
    if [[ $# -lt 2 ]]; then
      echo >&2 "Error: --recovery-window-in-days requires a value"
      exit 1
    fi
    recovery_window="$2"
    shift 2
    ;;
  -*)
    echo >&2 "Unknown option: $1"
    usage >&2
    exit 1
    ;;
  *)
    secret_id="$1"
    shift
    ;;
  esac
done

# Select secret if not provided
if [[ -z "$secret_id" ]]; then
  secret_id="$(aws-secretctl-select --limit 1)" || exit $?
  if [[ -z "$secret_id" ]]; then
    echo >&2 "No secret selected"
    exit 1
  fi
fi

# Interactive mode if neither force nor recovery window specified
if [[ -z "$force" && -z "$recovery_window" ]]; then
  action="$(echo -e "Force delete (immediate)\nSchedule deletion (7-30 days)\nCancel" | gum choose --header "How to delete secret '$secret_id'?")" || exit $?
  case "$action" in
  "Force delete (immediate)")
    force="true"
    ;;
  "Schedule deletion (7-30 days)")
    recovery_window="$(gum input --placeholder "Enter recovery window in days (7-30)" --value "30")"
    if [[ ! "$recovery_window" =~ ^[0-9]+$ ]] || [[ "$recovery_window" -lt 7 ]] || [[ "$recovery_window" -gt 30 ]]; then
      echo >&2 "Invalid recovery window: must be between 7 and 30 days"
      exit 1
    fi
    ;;
  Cancel | "")
    echo >&2 "Deletion cancelled"
    exit 1
    ;;
  esac
fi

# Validate recovery window if provided
if [[ -n "$recovery_window" ]]; then
  if [[ ! "$recovery_window" =~ ^[0-9]+$ ]] || [[ "$recovery_window" -lt 7 ]] || [[ "$recovery_window" -gt 30 ]]; then
    echo >&2 "Invalid recovery window: must be between 7 and 30 days"
    exit 1
  fi
fi

# Execute deletion with error handling
delete_secret() {
  if [[ -n "$force" ]]; then
    if aws secretsmanager delete-secret \
      --secret-id "$1" \
      --force-delete-without-recovery 2>/dev/null; then
      echo >&2 "Secret deleted immediately (no recovery possible)"
      return 0
    fi
  elif [[ -n "$recovery_window" ]]; then
    if aws secretsmanager delete-secret \
      --secret-id "$1" \
      --recovery-window-in-days "$recovery_window" 2>/dev/null; then
      echo >&2 "Secret scheduled for deletion in $recovery_window days"
      return 0
    fi
  else
    echo >&2 "Error: neither force nor recovery window specified"
    exit 1
  fi
  return 1
}

# Try to delete, fallback to select on error
if ! delete_secret "$secret_id"; then
  echo >&2 "Secret '$secret_id' not found, searching..."
  secret_id="$(aws-secretctl-select --limit 1 --query "$secret_id")" || exit $?
  if [[ -z "$secret_id" ]]; then
    echo >&2 "No secret selected"
    exit 1
  fi
  # Retry with resolved secret
  delete_secret "$secret_id" || exit 1
fi
