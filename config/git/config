[core]
	autocrlf     = input
	pager        = delta
	excludesFile = ~/.config/git/ignore
	autocrlf     = false

[user]
	name       = loganlinn
	email      = logan@llinn.dev
	signingKey = 32A48B412F1CA30ADB1B54382C3CDAE023DB6616

[init]
	defaultBranch = main
	templatedir   = ~/.config/git/template

[commit]
	gpgsign = true

[color]
	ui = auto

[pager]
	diff   = delta
	log    = delta
	reflog = delta
	show   = delta

[interactive]
	diffFilter = delta --color-only --features=interactive

[diff]
	wsErrorHighlight = all
	colorMoved       = zebra
	tool             = meld

[difftool]
	prompt = false

[difftool "meld"]
	cmd = meld "$LOCAL" "$REMOTE"

[apply]
	whitespace = nowarn

[help]
	autocorrect = 1

[advice]
	detachedHead = false
	statusHints  = false

[fetch]
	prune            = true
	writeCommitGraph = true

[push]
	default = current

[pull]
	rebase = true

[merge]
	ff = only

[rebase]
	autosquash = true
	autostash  = false # fool me once, ...

[filter "lfs"]
	clean    = git-lfs clean -- %f
	smudge   = git-lfs smudge -- %f
	process  = git-lfs filter-process
	required = true

[alias]
	a        = add
	b        = branch
	bb       = for-each-ref --sort=-committerdate --format=\"%(color:blue)%(authordate:relative)\t%(color:red)%(authorname)\t%(color:white)%(color:bold)%(refname:short)\" refs/remotes
	bi       = bisect
	bl       = blame
	c        = commit
	ca       = commit --amend
	caa      = commit --amend --no-edit
	cf       = commit --fixup
	cl       = clone
	co       = checkout
	codate   = "!f() { git checkout `git rev-list -n1 --before \"$@\" HEAD`; }; f"
	cp       = cherry-pick
	d        = diff --color --no-ext-diff
	dc       = !git d --cached
	dcs      = !git d --cached --stat
	des      = describe --contains
	ds       = !git d --stat
	dt       = difftool
	dw       = !git d --word-diff=color
	f        = fetch
	g        = grep
	h        = help
	lfp      = !git l --first-parent
    l        = log --graph --pretty='%C(242)%h %C(156)%s %C(248)%an%C(242), %C(248)%ar%C(222)%d' --decorate --date=relative
	ll       = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]%Creset" --decorate --numstat
	ln       = !git l @{1}..
	ls       = "!f() { git ls-files | grep "${@:-''}"; }; f"
	ls       = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]%Creset" --decorate
	lso      = ls-files --others --exclude-standard
	lsr      = ls-remote
	m        = merge
	ma       = merge --abort
	mt       = mergetool
	n        = name-rev --name-only
	p        = push
	pl       = pull --ff-only
	plr      = pull --rebase origin master
	r        = reset
	ra       = rebase --abort
	rc       = rebase --continue
	re       = rebase
	rem      = remote
	ri       = rebase -i --keep-empty
	rs       = rebase --skip
	ru       = remote update
	s        = status --short --branch --untracked-files=no
	sh       = show
	shs      = show --stat
	st       = stash
	stl      = stash list
	sts      = stash show -p
	t        = tag
	tr       = trail
	unmerged = branch --no-merged master
	wt       = worktree

	description = !git config --get "branch.$(git rev-parse --abbrev-ref HEAD).description"

	snapshot = !git stash push "snapshot: $(date)" && git stash apply "stash@{0}"

	ours   = !git checkout --ours $@ && git add $@
	theirs = !git checkout --theirs $@ && git add $@

	rank    = shortlog -sn --no-merges
	authors = "!f() { git log --no-merges --pretty='format:%<(26)%an <%ae>' --author \"$*\" | sort | uniq; }; f"

	upstream        = !git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD)
	upstream-remote = !git upstream | sed -e 's/\\/.*$//g'

	stash-grep = "!f() { git show $(git stash list | cut -d\":\" -f 1) | grep \"$@\" ; }; f"

	uncommit = reset --mixed HEAD~
	unstage = reset -q HEAD --

	lasttag = describe --tags --abbrev=0

	fixup = !sh -c 'REV=$(git rev-parse $1) && git commit --fixup $@ && git rebase -i --autosquash $REV^' -
	fixit = "!f() { git commit --fixup=$1; GIT_SEQUENCE_EDITOR=: git rebase -i --autosquash $1~1; }; f"
	ffix  = !HASH=`git log --pretty=oneline | head -n 100 | fzf` && git fixit `echo ${HASH} | awk '{ print $1 }'`
	frbi  = "!f() { git rebase -i $(git log --pretty=oneline --color=always | fzf --ansi | cut -d ' ' -f1)^ ; }; f"

[credential "https://github.com"]
	helper = !gh auth git-credential

[include]
	path = .gitconfig.darwin

[include]
	path = .gitconfig.linux

[include]
	path = .gitconfig.local

[include]
	path = ~/.config/git/config.local

# vim: ft=gitconfig cc=80 tw=79 ts=4 sw=4 sts=4 noet sr
